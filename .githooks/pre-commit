#!/bin/bash

# Pre-commit hook for adding file headers
# Automatically detects operating system and runs appropriate script

# Check operating system
if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]] || [[ -n "$WINDIR" ]]; then
    powershell.exe -ExecutionPolicy Bypass -File "$(dirname "$0")/pre-commit.ps1"
    exit $?
fi

# Cache package.json data
read -r project_name version < <(
    if [[ -f package.json ]]; then
        jq -r '.name + " " + .version' package.json 2>/dev/null || 
        echo "MindLens 1.0.0"
    else
        echo "MindLens 1.0.0"
    fi
)

# Supported file extensions
supported_extensions='ts|tsx|js|jsx|py|rs'

# Header templates
declare -A header_templates=(
    ["js|ts|tsx|jsx"]=$'/**\n * @author Andrii Volynets\n * @project {0}\n * @license APGL\n * @version {1}\n * @file {2}\n * @module {3}\n * @since {1}\n * @date {4}\n */'
    ["py"]=$'"""\n@author Andrii Volynets\n@project {0}\n@license APGL\n@version {1}\n@file {2}\n@module {3}\n@since {1}\n@date {4}\n"""'
    ["rs"]=$'/*\n * @author Andrii Volynets\n * @project {0}\n * @license APGL\n * @version {1}\n * @file {2}\n * @module {3}\n * @since {1}\n * @date {4}\n */'
)

# Function to create header
create_header() {
    local file="$1" ext="${1##*.}"
    local filename=$(basename "$file")
    local module_path=$(echo "$file" | sed 's|^./||;s|^apps/frontend/src/||' | xargs dirname)
    local current_date=$(date +"%Y-%m-%d")
    
    for pattern in "${!header_templates[@]}"; do
        if [[ $ext =~ $pattern ]]; then
            printf "${header_templates[$pattern]}" "$project_name" "$version" "$filename" "$module_path" "$current_date"
            return 0
        fi
    done
    return 1
}

# Function to check if header exists
has_header() {
    head -n 15 "$1" 2>/dev/null | grep -q "@author Andrii Volynets"
}

# Function to update header
update_header() {
    local file="$1"
    local temp_file=$(mktemp)
    trap 'rm -f "$temp_file"' EXIT
    
    local new_header=$(create_header "$file") || return
    
    if has_header "$file"; then
        # Remove existing header and clean up extra newlines
        awk -v header="$new_header" '
        BEGIN { in_header=0 }
        /^\/\*\*|^"""/ { in_header=1; print header; next }
        /\*\/$|^"""$/ { in_header=0; next }
        !in_header { print }
        ' "$file" | sed '/^$/N;/^\n$/D' > "$temp_file"
    else
        # Add new header
        {
            echo "$new_header"
            echo
            cat "$file"
        } > "$temp_file"
    fi
    
    mv "$temp_file" "$file"
    git add "$file"
    echo "Updated header in: $file"
}

# Process staged files
while IFS= read -r file; do
    [[ -f $file && $file =~ \.($supported_extensions)$ ]] && update_header "$file"
done < <(git diff --cached --name-only --diff-filter=ACM)

exit 0